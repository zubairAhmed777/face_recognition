import dlib
import cv2
import numpy as np
import pickle

# Load the pre-trained models
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')
face_rec_model = dlib.face_recognition_model_v1('dlib_face_recognition_resnet_model_v1.dat')

# Function to calculate Euclidean distance
def euclidean_distance(face_descriptor1, face_descriptor2):
    return np.linalg.norm(np.array(face_descriptor1) - np.array(face_descriptor2))

# Load the known face descriptors from the file
with open('known_face_descriptors.pkl', 'rb') as f:
    known_face_descriptors = pickle.load(f)

# Load the image to recognize faces
image_path = 'zubair_test.jpeg'  # Replace with your test image path
image = cv2.imread(image_path)
if image is None:
    print(f"Error: Unable to load image at {image_path}")
else:
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect faces in the image
    faces = detector(gray_image)
    #print(f"Number of faces detected: {len(faces)}")

    # Loop through each detected face
    for i, face in enumerate(faces):
        #print(f"Processing face {i+1}")
        cv2.rectangle(image, (face.left(), face.top()), (face.right(), face.bottom()), (0, 255, 0), 2)

        # Get the landmarks/parts for the face
        landmarks = predictor(gray_image, face)
        face_descriptor = face_rec_model.compute_face_descriptor(image, landmarks)

        # Compare the detected face with known faces
        name = "Unknown"
        min_distance = float('inf')
        for known_name, known_descriptor in known_face_descriptors:
            distance = euclidean_distance(face_descriptor, known_descriptor)
            if distance < 0.6 and distance < min_distance:
                min_distance = distance
                name = known_name

        # Display the name below the face rectangle
        cv2.putText(image, name, (face.left(), face.bottom() + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    # Display the image with detected faces and names
    cv2.imshow("Face Recognition", image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

